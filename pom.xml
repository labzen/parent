<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>cn.labzen</groupId>
  <artifactId>parent</artifactId>
  <packaging>pom</packaging>
  <version>11.9-SNAPSHOT</version>
  <name>Labzen.Parent</name>
  <description>Labzen PARENT POM（11版本对应JDK 11）</description>
  <url>https://github.com/labzen/parent</url>

  <licenses>
    <license>
      <name>Apache License 2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
    </license>
  </licenses>

  <organization>
    <name>Labzen</name>
    <url>https://labzen.cn</url>
  </organization>

  <developers>
    <developer>
      <name>Dean Zhao</name>
      <email>rcarlosdasilva@163.com</email>
      <timezone>+8</timezone>
    </developer>
  </developers>

  <scm>
    <url>https://github.com/labzen/parent</url>
    <connection>scm:git:git@github.com:labzen/parent.git</connection>
    <developerConnection>scm:git:git@github.com:labzen/parent.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <properties>
    <organization.name>Labzen</organization.name>
    <organization.url>https://labzen.cn</organization.url>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <require.maven.version>3.6.3</require.maven.version>

    <jdk.version>11</jdk.version>
    <kotlin.version>1.7.0</kotlin.version>
    <kotlin.compiler.incremental>true</kotlin.compiler.incremental>

    <dependencies.version>1.9-SNAPSHOT</dependencies.version>

    <plugin.clean.version>3.1.0</plugin.clean.version>
    <plugin.compiler.version>3.10.0</plugin.compiler.version>
    <plugin.deploy.version>3.0.0-M2</plugin.deploy.version>
    <plugin.failsafe.version>3.0.0-M5</plugin.failsafe.version>
    <plugin.install.version>3.0.0-M1</plugin.install.version>
    <plugin.resources.version>3.2.0</plugin.resources.version>
    <plugin.surefire.version>3.0.0-M5</plugin.surefire.version>
    <plugin.site.version>3.10.0</plugin.site.version>
    <plugin.verifier.version>1.1</plugin.verifier.version>

    <plugin.jar.version>3.2.0</plugin.jar.version>
    <plugin.war.version>3.3.2</plugin.war.version>
    <plugin.shade.version>3.2.4</plugin.shade.version>
    <plugin.source.version>3.2.1</plugin.source.version>

    <plugin.javadoc.version>3.3.1</plugin.javadoc.version>
    <plugin.surefire.report.version>3.0.0-M5</plugin.surefire.report.version>

    <plugin.antrun.version>3.0.0</plugin.antrun.version>
    <plugin.assembly.version>3.3.0</plugin.assembly.version>
    <plugin.dependency.version>3.2.0</plugin.dependency.version>
    <plugin.enforcer.version>3.0.0</plugin.enforcer.version>
    <plugin.gpg.version>3.0.1</plugin.gpg.version>
    <plugin.plugin.version>3.6.2</plugin.plugin.version>
    <plugin.release.version>3.0.0-M4</plugin.release.version>

    <plugin.nexus.staging.version>1.6.12</plugin.nexus.staging.version>
    <plugin.spring.boot.version>2.1.3.RELEASE</plugin.spring.boot.version>
    <plugin.maven.project.reports.version>3.1.2</plugin.maven.project.reports.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>cn.labzen</groupId>
        <artifactId>dependencies</artifactId>
        <version>${dependencies.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-generator-annprocess</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>

    <resources>
      <resource>
        <directory>${basedir}/src/main/resources</directory>
        <includes>
          <include>META-INF/**/*.*</include>
          <include>**/*.xml</include>
          <include>**/*.xsd</include>
          <include>**/*.yml</include>
          <include>**/*.fxml</include>
          <include>**/*.properties</include>
          <include>**/*.sql</include>
          <include>**/*.md</include>
          <include>**/*.txt</include>
          <include>**/*.js</include>
          <include>**/*.js.map</include>
          <include>**/*.css</include>
          <include>**/*.json</include>
          <include>**/*.html</include>
          <include>**/*.htm</include>
        </includes>
        <filtering>true</filtering>
      </resource>
      <resource>
        <!-- maven的filter（拦截），会破坏font文件的二进制文件格式 -->
        <directory>${basedir}/src/main/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>**/*.jpg</include>
          <include>**/*.jpeg</include>
          <include>**/*.png</include>
          <include>**/*.gif</include>
          <include>**/*.bmp</include>
          <include>**/*.ttf</include>
          <include>**/*.otf</include>
          <include>**/*.eot</include>
          <include>**/*.svg</include>
          <include>**/*.woff</include>
          <include>**/*.woff2</include>
          <include>**/*.mp3</include>
          <include>**/*.wav</include>
          <include>**/*.jks</include>
          <include>**/*.p12</include>
          <include>**/*.pfx</include>
          <include>**/*.p7b</include>
          <include>**/*.keystore</include>
          <include>**/*.crt</include>
          <include>**/*.cer</include>
          <include>**/*.pem</include>
          <include>**/*.dll</include>
          <include>**/*.so</include>
        </includes>
      </resource>
    </resources>

    <testResources>
      <testResource>
        <directory>${basedir}/src/test/resources</directory>
        <includes>
          <include>META-INF/**/*.*</include>
          <include>**/*.xml</include>
          <include>**/*.xsd</include>
          <include>**/*.yml</include>
          <include>**/*.fxml</include>
          <include>**/*.properties</include>
          <include>**/*.sql</include>
          <include>**/*.md</include>
          <include>**/*.txt</include>
          <include>**/*.js</include>
          <include>**/*.js.map</include>
          <include>**/*.css</include>
          <include>**/*.json</include>
          <include>**/*.html</include>
          <include>**/*.htm</include>
        </includes>
        <filtering>true</filtering>
      </testResource>
      <testResource>
        <!-- maven的filter，会破坏二进制文件格式 -->
        <directory>${basedir}/src/test/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>**/*.jpg</include>
          <include>**/*.jpeg</include>
          <include>**/*.png</include>
          <include>**/*.gif</include>
          <include>**/*.bmp</include>
          <include>**/*.ttf</include>
          <include>**/*.otf</include>
          <include>**/*.eot</include>
          <include>**/*.svg</include>
          <include>**/*.woff</include>
          <include>**/*.woff2</include>
          <include>**/*.mp3</include>
          <include>**/*.wav</include>
          <include>**/*.jks</include>
          <include>**/*.p12</include>
          <include>**/*.pfx</include>
          <include>**/*.p7b</include>
          <include>**/*.keystore</include>
          <include>**/*.crt</include>
          <include>**/*.cer</include>
          <include>**/*.pem</include>
          <include>**/*.dll</include>
          <include>**/*.so</include>
        </includes>
      </testResource>
    </testResources>

    <pluginManagement>
      <plugins>
        <!-- ==== Core plugins: Plugins corresponding to default core phases (ie. clean, compile). They may have multiple goals as well. ==== -->
        <!-- About Clean: Clean up after the build. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${plugin.clean.version}</version>
        </plugin>

        <!-- About Compile: Compiles Java sources. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${plugin.compiler.version}</version>
          <executions>
            <!-- Replacing default-compile as it is treated specially by maven -->
            <execution>
              <id>default-compile</id>
              <phase>none</phase>
            </execution>
            <!-- Replacing default-testCompile as it is treated specially by maven -->
            <execution>
              <id>default-testCompile</id>
              <phase>none</phase>
            </execution>
            <execution>
              <id>java-compile</id>
              <phase>compile</phase>
              <goals>
                <goal>compile</goal>
              </goals>
            </execution>
            <execution>
              <id>java-test-compile</id>
              <phase>test-compile</phase>
              <goals>
                <goal>testCompile</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <parameters>true</parameters>
            <source>${jdk.version}</source>
            <target>${jdk.version}</target>
            <encoding>${project.build.sourceEncoding}</encoding>
          </configuration>
        </plugin>

        <!-- About Deploy: Deploy the built artifact to the remote repository. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${plugin.deploy.version}</version>
        </plugin>

        <!-- About Failsafe: Run the JUnit integration tests in an isolated classloader. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${plugin.failsafe.version}</version>
          <executions>
            <execution>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <classesDirectory>${project.build.outputDirectory}</classesDirectory>
            <encoding>${project.build.sourceEncoding}</encoding>
          </configuration>
        </plugin>

        <!-- About Install: Install the built artifact into the local repository. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>${plugin.install.version}</version>
        </plugin>

        <!-- About Resources: Copy the resources to the output directory for including in the JAR. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${plugin.resources.version}</version>
          <configuration>
            <encoding>${project.build.sourceEncoding}</encoding>
            <resources>
              <resource>
                <directory>${basedir}/src/main/resources</directory>
                <includes>
                  <include>**/*</include>
                </includes>
                <filtering>true</filtering>
              </resource>
              <resource>
                <directory>${basedir}/src/test/resources</directory>
                <excludes>
                  <exclude>**/*</exclude>
                </excludes>
                <filtering>true</filtering>
              </resource>
            </resources>
            <useDefaultDelimiters>false</useDefaultDelimiters>
            <nonFilteredFileExtensions>
              <nonFilteredFileExtension>jks</nonFilteredFileExtension>
              <nonFilteredFileExtension>p12</nonFilteredFileExtension>
              <nonFilteredFileExtension>pfx</nonFilteredFileExtension>
              <nonFilteredFileExtension>p7b</nonFilteredFileExtension>
              <nonFilteredFileExtension>keystore</nonFilteredFileExtension>
              <nonFilteredFileExtension>crt</nonFilteredFileExtension>
              <nonFilteredFileExtension>cer</nonFilteredFileExtension>
              <nonFilteredFileExtension>pem</nonFilteredFileExtension>
            </nonFilteredFileExtensions>
            <delimiters>
              <delimiter>#</delimiter>
              <delimiter>@</delimiter>
              <delimiter>${*}</delimiter>
            </delimiters>
          </configuration>
        </plugin>

        <!-- About Surefire: Run the JUnit unit tests in an isolated classloader. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${plugin.surefire.version}</version>
          <configuration>
            <skipTests>true</skipTests>
            <argLine>-Dfile.encoding=${project.build.sourceEncoding}</argLine>
          </configuration>
        </plugin>

        <!-- About Site: Generate a site for the current project. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>${plugin.site.version}</version>
        </plugin>

        <!-- About Verifier: Useful for integration tests - verifies the existence of certain conditions. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-verifier-plugin</artifactId>
          <version>${plugin.verifier.version}</version>
        </plugin>

        <!-- ==== Packaging types/tools: These plugins relate to packaging respective artifact types. ==== -->
        <!-- About Jar: Build a JAR from the current project. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${plugin.jar.version}</version>
          <configuration>
            <archive>
              <manifest>
                <!--suppress UnresolvedMavenProperty -->
                <mainClass>${start-class}</mainClass>
                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              </manifest>
            </archive>
          </configuration>
        </plugin>

        <!-- About War: Build a WAR from the current project. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>${plugin.war.version}</version>
          <configuration>
            <archive>
              <manifest>
                <!--suppress UnresolvedMavenProperty -->
                <mainClass>${start-class}</mainClass>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              </manifest>
            </archive>
          </configuration>
        </plugin>

        <!-- About Shade: Build an Uber-JAR from the current project, including dependencies. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>${plugin.shade.version}</version>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <transformers>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                    <resource>META-INF/spring.handlers</resource>
                  </transformer>
                  <transformer implementation="org.springframework.boot.maven.PropertiesMergingResourceTransformer">
                    <resource>META-INF/spring.factories</resource>
                  </transformer>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                    <resource>META-INF/spring.schemas</resource>
                  </transformer>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                    <!--suppress UnresolvedMavenProperty -->
                    <mainClass>${start-class}</mainClass>
                  </transformer>
                </transformers>
              </configuration>
            </execution>
          </executions>
          <dependencies>
            <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-maven-plugin</artifactId>
              <version>${plugin.spring.boot.version}</version>
            </dependency>
          </dependencies>
          <configuration>
            <keepDependenciesWithProvidedScope>true</keepDependenciesWithProvidedScope>
            <createDependencyReducedPom>true</createDependencyReducedPom>
            <filters>
              <filter>
                <artifact>*:*</artifact>
                <excludes>
                  <exclude>META-INF/*.SF</exclude>
                  <exclude>META-INF/*.DSA</exclude>
                  <exclude>META-INF/*.RSA</exclude>
                </excludes>
              </filter>
            </filters>
          </configuration>
        </plugin>

        <!-- About Source: Build a source-JAR from the current project. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>${plugin.source.version}</version>
          <executions>
            <execution>
              <id>attach-sources</id>
              <phase>package</phase>
              <goals>
                <goal>jar-no-fork</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- ==== Reporting plugins: Plugins which generate reports, are configured as reports in the POM and run under the site generation lifecycle. ==== -->
        <!-- About Javadoc: Generate Javadoc for the project. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${plugin.javadoc.version}</version>
          <configuration>
            <source>${jdk.version}</source>
            <quiet>true</quiet>
            <encoding>${project.build.sourceEncoding}</encoding>
            <charset>${project.build.sourceEncoding}</charset>
            <docencoding>${project.build.sourceEncoding}</docencoding>
            <linksource>true</linksource>
            <failOnError>false</failOnError>
            <additionalJOptions>
              <!-- 忽略自定义标签的错误 -->
              <additionalJOption>-Xdoclint:none</additionalJOption>
            </additionalJOptions>
          </configuration>
          <executions>
            <execution>
              <id>attach-javadocs</id>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- About Surefire Report: Generate a report based on the results of unit tests. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-report-plugin</artifactId>
          <version>${plugin.surefire.report.version}</version>
        </plugin>

        <!-- ==== Tools: These are miscellaneous tools available through Maven by default. ==== -->
        <!-- About Antrun: Run a set of ant tasks from a phase of the build. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>${plugin.antrun.version}</version>
        </plugin>

        <!-- About Assembly: Build an assembly (distribution) of sources and/or binaries. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>${plugin.assembly.version}</version>
        </plugin>

        <!-- About Dependency: Dependency manipulation (copy, unpack) and analysis. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${plugin.dependency.version}</version>
        </plugin>

        <!-- About Enforcer: Environmental constraint checking (Maven Version, JDK etc), User Custom Rule Execution. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${plugin.enforcer.version}</version>
          <executions>
            <execution>
              <id>enforce-versions</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <requireJavaVersion>
                    <version>${jdk.version}</version>
                  </requireJavaVersion>
                  <requireMavenVersion>
                    <version>${require.maven.version}</version>
                  </requireMavenVersion>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- About GPG: Create signatures for the artifacts and poms. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <version>${plugin.gpg.version}</version>
          <executions>
            <execution>
              <id>sign-artifacts</id>
              <phase>verify</phase>
              <goals>
                <goal>sign</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- About Plugin: Create a Maven plugin descriptor for any mojos found in the source tree, to include in the JAR. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-plugin-plugin</artifactId>
          <version>${plugin.plugin.version}</version>
        </plugin>

        <!-- About Release: Release the current project - updating the POM and tagging in the SCM. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>${plugin.release.version}</version>
          <configuration>
            <tagNameFormat>v${project.version}</tagNameFormat>
            <scmCommentPrefix>deploy:</scmCommentPrefix>
          </configuration>
        </plugin>

        <!-- ==== Others ==== -->
        <!-- About Kotlin: Kotlin Maven Plugin. -->
        <plugin>
          <groupId>org.jetbrains.kotlin</groupId>
          <artifactId>kotlin-maven-plugin</artifactId>
          <version>${kotlin.version}</version>
          <configuration>
            <args>
              <arg>-Xjsr305=strict</arg>
            </args>
            <compilerPlugins>
              <plugin>spring</plugin>
            </compilerPlugins>
            <jvmTarget>${jdk.version}</jvmTarget>
            <javaParameters>true</javaParameters>
          </configuration>
          <executions>
            <execution>
              <id>compile</id>
              <phase>process-sources</phase>
              <goals>
                <goal>compile</goal>
              </goals>
              <configuration>
                <sourceDirs>
                  <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
                  <sourceDir>${project.basedir}/src/main/java</sourceDir>
                </sourceDirs>
              </configuration>
            </execution>
            <execution>
              <id>test-compile</id>
              <phase>process-test-sources</phase>
              <goals>
                <goal>test-compile</goal>
              </goals>
              <configuration>
                <sourceDirs>
                  <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
                  <sourceDir>${project.basedir}/src/test/java</sourceDir>
                </sourceDirs>
              </configuration>
            </execution>
          </executions>
          <dependencies>
            <dependency>
              <groupId>org.jetbrains.kotlin</groupId>
              <artifactId>kotlin-maven-allopen</artifactId>
              <version>${kotlin.version}</version>
            </dependency>
          </dependencies>
        </plugin>

        <!-- About Dokka: Dokka is a documentation engine for Kotlin and Java, performing the same function as Javadoc for Java. -->
        <plugin>
          <groupId>org.jetbrains.dokka</groupId>
          <artifactId>dokka-maven-plugin</artifactId>
          <version>${kotlin.version}</version>
          <executions>
            <execution>
              <phase>compile</phase>
              <goals>
                <goal>javadocJar</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <jdkVersion>${jdk.version}</jdkVersion>
            <reportUndocumented>false</reportUndocumented>
          </configuration>
        </plugin>

        <!-- About Nexus Staging: Provides support to access staging functionality in a remote Nexus Professional server.  -->
        <plugin>
          <groupId>org.sonatype.plugins</groupId>
          <artifactId>nexus-staging-maven-plugin</artifactId>
          <version>${plugin.nexus.staging.version}</version>
          <extensions>true</extensions>
        </plugin>

        <!-- About Spring Boot: Spring Boot Maven Plugin. -->
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${plugin.spring.boot.version}</version>
          <executions>
            <execution>
              <id>repackage</id>
              <goals>
                <goal>repackage</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <!--suppress UnresolvedMavenProperty -->
            <mainClass>${start-class}</mainClass>
          </configuration>
        </plugin>

        <!-- About Maven Project Report: The Maven Project Info Reports Plugin generates standard reports for the specified project. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>${plugin.maven.project.reports.version}</version>
          <configuration>
            <pluginManagementExcludes>
              <exclude>org.eclipse.m2e:lifecycle-mapping</exclude>
            </pluginManagementExcludes>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>index</report>
              <report>summary</report>
              <report>dependency-info</report>
              <report>modules</report>
              <report>team</report>
              <report>scm</report>
              <report>issue-management</report>
              <report>mailing-lists</report>
              <report>dependency-management</report>
              <report>dependencies</report>
              <report>dependency-convergence</report>
              <report>ci-management</report>
              <report>plugin-management</report>
              <report>plugins</report>
              <report>distribution-management</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

  <profiles>
    <profile>
      <id>snapshot</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>

      <repositories>
        <repository>
          <id>aliyun-public</id>
          <url>https://maven.aliyun.com/repository/public</url>
        </repository>
        <repository>
          <id>aliyun-central</id>
          <url>https://maven.aliyun.com/repository/central</url>
        </repository>
        <repository>
          <id>aliyun-spring</id>
          <url>https://maven.aliyun.com/repository/spring</url>
        </repository>
        <repository>
          <id>activiti-releases</id>
          <url>https://artifacts.alfresco.com/nexus/content/repositories/activiti-releases</url>
        </repository>
        <repository>
          <id>sonatype-snapshots</id>
          <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
          <releases>
            <enabled>false</enabled>
          </releases>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </repository>
      </repositories>
    </profile>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <inherited>false</inherited>
            <configuration>
              <serverId>ossrh</serverId>
              <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
              <autoReleaseAfterClose>true</autoReleaseAfterClose>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <inherited>false</inherited>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>